//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.6
//
package com.sptulsian;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.Html;
import android.text.TextUtils;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;


import org.json.JSONObject;

import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Splash Activity is the start-up activity that appears until a delay is expired
 * or the user taps the screen.  When the splash activity starts, various app
 * initialization operations are performed.
 */
public class SplashActivity extends Activity {
    private DBHelper mydb ;
    String token1;
    String token;
    String device;
    String username;
    String password;
    String deviceId;
    boolean request = false;
    ProgressDialog pd;
    private UserLoginTask mAuthTask = null;
    Boolean responseOk;

    private Context context;
    public static final String HomeURL = "https://dev.sptulsian.com/";



    private final static String LOG_TAG = SplashActivity.class.getSimpleName();
    private final CountDownLatch timeoutLatch = new CountDownLatch(1);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.d(LOG_TAG, "onCreate");
        pd = ProgressDialog.show(this, "", "Loading...",false);
        responseOk = false;
        Intent intent = getIntent();
        if (intent.hasExtra("click_action")) {
            System.out.println("This is click event");
            ClickActionHelper.startActivity(intent.getStringExtra("click_action"), intent.getExtras(), this);
        }

        if(intent.getExtras()!= null) {
            Bundle bundle = intent.getExtras();
            System.out.println("Extra"+intent.getExtras());
            if (bundle.getString("SearchText") != null) {
                System.out.println("Searchtext" );
                if (bundle.getString("Type") != null) {
                    String type = bundle.getString("Type");
                    if (type.equals("Member")) {
                        System.out.println("MemberZone");
                    } else {
                    }
                } else {
                    System.out.println("No type bt has extra");
                }
            }else{
                System.out.println("No Serachtext bt has extra");
            }
        }else{
            System.out.println("No extras");
        }
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        //this.deleteDatabase("sptdb.db");
        mydb = new DBHelper(this);
        device = "Android";


        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);

        if(isNetworkAvailable() == false){

            AlertDialog.Builder builder = new AlertDialog.Builder(SplashActivity.this);
            builder.setTitle("Network Issue!")
                    .setMessage(Html.fromHtml("No internet connection found.<br/> Please enable Wifi or Mobile Data."))
                    .setPositiveButton("ok", new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    });


            AlertDialog welcomeAlert = builder.create();
            welcomeAlert.show();

        }
        else{
            final Thread thread = new Thread(new Runnable() {
                public void run() {
                    // Wait for the splash timeout.
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) { }

                    // Expire the splash page delay.
                    timeoutLatch.countDown();
                }
            });

            thread.start();
            goMain();
        }


    }






    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager
                = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }



    @Override
    public boolean onTouchEvent(MotionEvent event) {
        // Touch event bypasses waiting for the splash timeout to expire.
        timeoutLatch.countDown();
        return true;
    }

    /**
     * Starts an activity after the splash timeout.
     * @param intent the intent to start the activity.
     */
    private void goAfterSplashTimeout(final Intent intent) {
        final Thread thread = new Thread(new Runnable() {
            public void run() {
                // wait for the splash timeout expiry or for the user to tap.
                try {
                    timeoutLatch.await();
                } catch (InterruptedException e) {
                }

                SplashActivity.this.runOnUiThread(new Runnable() {
                    public void run() {
                        startActivity(intent);
                        // finish should always be called on the main thread.
                        finish();
                    }
                });
            }
        });
        thread.start();
    }

    /**
     * Go to the main activity after the splash timeout has expired.
     */

    private void attemptLogin() {

            mAuthTask = new UserLoginTask(username, password,token,deviceId);
            responseOk = false;
            mAuthTask.execute();
            new Handler().postDelayed(new Runnable() {

                @Override
                public void run() {
                    if (responseOk == false) {
                        /*if(pd!=null && pd.isShowing())
                        {
                            pd.dismiss();
                        }*/
                        showProgressLoader(false);
                        Toast.makeText(getApplicationContext(),
                                "Problem with network. Please try again", Toast.LENGTH_LONG).show();


                    }
                }
            }, 15000);
            Button btn = (Button)findViewById(R.id.sign_in_button);

    }

    public void showProgressLoader(Boolean value){
        if(value){
            pd.show();
        }else{
            pd.dismiss();
        }
    }


    public class UserLoginTask extends AsyncTask<String, Void, String> {

        private final String mEmail;
        private final String mPassword;
        private final String mToken;
        private final String mDeviceId;

        UserLoginTask(String email, String password, String token, String deviceid) {
            mEmail = email;
            mPassword = password;
            mToken = token;
            mDeviceId = deviceid;
        }

        @Override
        protected String doInBackground(String... params) {

            try {
                OkHttpClient client = new OkHttpClient.Builder()
                        .connectTimeout(10, TimeUnit.SECONDS)
                        .writeTimeout(10, TimeUnit.SECONDS)
                        .readTimeout(30, TimeUnit.SECONDS)
                        .build();


                RequestBody postData = new FormBody.Builder()
                        .add("username",mEmail)
                        .add("password",mPassword)
                        .add("token", mToken)
                        .add("deviceId", mDeviceId)
                        .build();

                Request request = new Request.Builder()
                        .url(HomeURL+"/ws_sign_in")
                        //.header("x-api-key","t1zYkDOmba1kIbJOBXtgO6qC1qSPgWpp4oMKsK9I")
                        .post(postData)
                        .build();

                Response response = null;
              /*  Response httpResponse = client.newCall(request).execute();
                httpResponse.code();*/
                response = client.newCall(request).execute();
                System.out.println(response);
                return response.body().string();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            mAuthTask = null;

            try{
                super.onPostExecute(s);
                JSONObject reader = new JSONObject(s);
                JSONObject msg  = reader.getJSONObject("Response");
                /*Toast.makeText(getApplicationContext(),
                        String.valueOf(msg), Toast.LENGTH_LONG).show();*/
                Integer status_code = msg.getInt("Status_code");
                String alert = msg.getString("Message");
                if (status_code == 500){
                    Toast.makeText(getApplicationContext(),
                            alert, Toast.LENGTH_LONG).show();
                    System.out.println(pd);
                    //pd.dismiss();
                    showProgressLoader(false);
                    responseOk = true;
                    goAfterSplashTimeout(new Intent(SplashActivity.this, LoginActivity.class));

                } else{
                    /*if(pd!=null && pd.isShowing())
                    {
                        pd.dismiss();
                    }*/
                    showProgressLoader(false);
                    responseOk =true;
                    Toast.makeText(getApplicationContext(),
                            alert, Toast.LENGTH_LONG).show();
                    mydb.updateDBUser(1,mEmail,mPassword);
                    goAfterSplashTimeout(new Intent(SplashActivity.this, MainActivity.class));
                }
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
    }


    protected void goMain() {
        Cursor c = mydb.getDBToken(1);
        c.moveToFirst();
        token = c.getString(c.getColumnIndex(DBHelper.User_COLUMN_token));

        Cursor c1 = mydb.getDBUsername(1);
        c1.moveToFirst();
        username = c1.getString(c1.getColumnIndex(DBHelper.User_COLUMN_username));

        Cursor c2 = mydb.getDBPassword(1);
        c2.moveToFirst();
        password = c2.getString(c2.getColumnIndex(DBHelper.User_COLUMN_password));

        Cursor c3 = mydb.getDBDeviceId(1);
        c3.moveToFirst();
        deviceId = c3.getString(c3.getColumnIndex(DBHelper.User_COLUMN_deviceId));

        c.close();
        c1.close();
        c2.close();
        c3.close();
        mydb.close();
        if(token != null && username != null){
            attemptLogin();
        }
        else{
            goAfterSplashTimeout(new Intent(this, LoginActivity.class));
        }
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        if (intent.hasExtra("click_action")) {
            ClickActionHelper.startActivity(intent.getStringExtra("click_action"), intent.getExtras(), this);
        }

    }
}
